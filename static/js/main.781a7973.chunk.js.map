{"version":3,"sources":["components/Cell.js","components/Grid.js","Game.js","index.js","images/victory.jpg"],"names":["Cell","props","cell_value","cell_class","open","hasMine","className","data-cell-value","value","hasFlag","data-index","index","Grid","state","grid","started","locked","this","initGrid","empty_grid","Array","WIDTH","fill","forEach","cell","i","arr","id","has_mine","has_flag","setState","safe_cell_id","mine_cells","generateMineArr","getNeighborsIds","grid_cells","indexOf","startTimer","Date","now","safe_cells","length","Number","mines","new_mine_pos","getRandomInteger","push","sort","a","b","cell_id","include_self","group","filter","max","Math","floor","random","cell_neighbors","tryChordCell","getNeighbors","loseTheGame","checkVictory","tryAutoflagCell","updateMineCount","openCell","flagCell","winTheGame","e","clicked_cell_index","clicked_cell","target","closest","dataset","button","fillGrid","Fragment","onMouseDown","onGridMouseDown","bind","onMouseUp","onGridMouseUp","map","key","React","Component","Game","victory","game_timer","mine_count","grid_refresh_key","window","oncontextmenu","start","timer","setInterval","round","clearInterval","flags","stopTimer","resetTimer","onClick","restartTheGame","src","Victory","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.781a7973.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Cell(props) {\r\n  let cell_class = 'cell',\r\n      cell_value;\r\n  \r\n  if (props.open) {\r\n    if (props.hasMine) {\r\n      cell_class += ' cell_mine'\r\n      cell_value = <span className=\"cell__value cell__value_mine\">ðŸ’£</span>\r\n    } else {\r\n      cell_class += ' cell_open'\r\n      cell_value = <span data-cell-value={props.value} className=\"cell__value\">{props.value || null}</span>\r\n    }\r\n  } else if (props.hasFlag) {\r\n    cell_value = <span className=\"cell__value cell__value_flag\">ðŸš©</span>\r\n  }\r\n\r\n  return(\r\n    <div className={cell_class} data-index={props.index}>\r\n      {cell_value}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nconst WIDTH = 16;\r\nconst HEIGHT = 16;\r\nconst SIZE = WIDTH * HEIGHT;\r\n\r\nclass Grid extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      grid: [],\r\n      started: false,\r\n      locked: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initGrid();\r\n  }\r\n\r\n  initGrid() {\r\n    const empty_grid = Array(SIZE).fill(null);\r\n\r\n    empty_grid.forEach((cell, i, arr) => {\r\n      arr[i] = {\r\n        id: i,\r\n        open: false,\r\n        has_mine: false,\r\n        has_flag: false,\r\n        value: null\r\n      }\r\n    })\r\n\r\n    this.setState({\r\n      grid: empty_grid\r\n    })\r\n  }\r\n\r\n  fillGrid(safe_cell_id) {\r\n    const mine_cells = this.generateMineArr(this.getNeighborsIds(safe_cell_id, true)),\r\n          grid_cells = this.state.grid;\r\n\r\n    grid_cells.forEach((cell, i, arr) => {\r\n      if (mine_cells.indexOf(i) !== -1) {\r\n        cell.has_mine = true;\r\n      }\r\n    })\r\n\r\n    this.setState({\r\n      grid: grid_cells\r\n    })\r\n    this.props.startTimer(Date.now());\r\n  }\r\n\r\n  generateMineArr(safe_cells) {\r\n    const mine_cells = [];\r\n\r\n    while (mine_cells.length < Number(this.props.mines)) {\r\n      let new_mine_pos = this.getRandomInteger(SIZE);\r\n      if (mine_cells.indexOf(new_mine_pos) === -1 && safe_cells.indexOf(new_mine_pos) === -1) {\r\n        mine_cells.push(new_mine_pos);\r\n      }\r\n    }\r\n\r\n    mine_cells.sort((a,b) => {\r\n      return a > b;\r\n    });\r\n\r\n    return mine_cells;\r\n  }\r\n\r\n  getNeighbors(cell_id, include_self) {\r\n    const grid = this.state.grid;\r\n    let group = [];\r\n\r\n    if (include_self) {\r\n      group.push(grid[cell_id]);\r\n    }\r\n\r\n    // add vertically adjacent\r\n    group.push(grid[cell_id - HEIGHT], grid[cell_id + HEIGHT]);\r\n\r\n    // add all adjacent on the left if not on the edge\r\n    if (cell_id % WIDTH !== 0) {\r\n      group.push(grid[cell_id - 1 - WIDTH], grid[cell_id - 1], grid[cell_id - 1 + WIDTH]);      \r\n    }\r\n\r\n    // add all adjacent on the right if not on the edge\r\n    if ((cell_id + 1) % WIDTH !== 0) {\r\n      group.push(grid[cell_id + 1 - WIDTH], grid[cell_id + 1], grid[cell_id + 1 + WIDTH]);\r\n    }\r\n\r\n    group = group.filter(cell => {\r\n      return cell && (cell.id >= 0) && (cell.id < SIZE)\r\n    })\r\n\r\n    group.sort((a,b) => {\r\n      return a.id > b.id;\r\n    });\r\n\r\n    return group;\r\n  }\r\n\r\n  getNeighborsIds(cell_id, include_self) {\r\n    let group = [];\r\n\r\n    if (include_self) {\r\n      group.push(cell_id);\r\n    }\r\n\r\n    // add vertically adjacent\r\n    group.push(cell_id - HEIGHT, cell_id + HEIGHT);\r\n\r\n    // add all adjacent on the left if not on the edge\r\n    if (cell_id % WIDTH !== 0) {\r\n      group.push(cell_id - 1 - WIDTH, cell_id - 1, cell_id - 1 + WIDTH);      \r\n    }\r\n\r\n    // add all adjacent on the right if not on the edge\r\n    if ((cell_id + 1) % WIDTH !== 0) {\r\n      group.push(cell_id + 1 - WIDTH, cell_id + 1, cell_id + 1 + WIDTH);\r\n    }\r\n\r\n    group = group.filter(id => {\r\n      return (id >= 0) && (id < SIZE)\r\n    })\r\n\r\n    group.sort((a,b) => {\r\n      return a > b;\r\n    });\r\n\r\n    return group;\r\n  }\r\n\r\n  getRandomInteger(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n  }\r\n\r\n  openCell(index) {\r\n    const grid = this.state.grid;\r\n    let cell_neighbors;\r\n\r\n    if (grid[index].has_flag) {\r\n      return;\r\n    }\r\n\r\n    if (grid[index].open && grid[index].value !== 0) {\r\n      this.tryChordCell(index);\r\n      return;\r\n    }\r\n\r\n    cell_neighbors = this.getNeighbors(index)\r\n\r\n    grid[index].open = true;\r\n\r\n    if (grid[index].has_mine) {\r\n      this.loseTheGame();\r\n      return;\r\n    }\r\n\r\n    grid[index].value = cell_neighbors.filter(cell => cell.has_mine).length;\r\n\r\n\r\n    if (grid[index].value === 0) {\r\n      this.tryChordCell(index);\r\n    }\r\n\r\n    this.setState({\r\n      grid: grid\r\n    })\r\n\r\n    this.checkVictory();\r\n  }\r\n\r\n  flagCell(index) {\r\n    const grid = this.state.grid;\r\n\r\n    if (grid[index].open) {\r\n      this.tryAutoflagCell(index);\r\n      return;\r\n    }\r\n\r\n    grid[index].has_flag = !grid[index].has_flag;\r\n\r\n    this.setState({\r\n      grid: grid\r\n    })\r\n\r\n    this.props.updateMineCount(grid.filter(cell => cell.has_flag).length);\r\n  }\r\n\r\n  tryChordCell(index) {\r\n    const grid = this.state.grid,\r\n          cell_neighbors = this.getNeighbors(index);\r\n\r\n    if (cell_neighbors.filter(cell => cell.has_flag).length >= grid[index].value) {\r\n      cell_neighbors.forEach(cell => {\r\n        if (!cell.open) {\r\n          this.openCell(cell.id);\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  tryAutoflagCell(index) {\r\n    const grid = this.state.grid,\r\n          cell_neighbors = this.getNeighbors(index);\r\n    \r\n    if (cell_neighbors.filter(cell => !cell.open).length === grid[index].value) {\r\n      cell_neighbors.forEach(cell => {\r\n        if (!cell.open && !cell.has_flag) {\r\n          this.flagCell(cell.id)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  checkVictory() {\r\n    const grid = this.state.grid;\r\n\r\n    if(grid.filter(cell => !cell.open).length === this.props.mines) {\r\n      this.setState({\r\n        locked: true\r\n      })\r\n      this.props.winTheGame();\r\n    }\r\n  }\r\n\r\n  loseTheGame() {\r\n    const grid = this.state.grid;\r\n\r\n    grid.forEach(cell => {\r\n      if (cell.has_mine) {\r\n        cell.open = true;\r\n      }\r\n    })\r\n\r\n    this.setState({\r\n      grid: grid,\r\n      locked: true\r\n    })\r\n    this.props.loseTheGame();\r\n  }\r\n\r\n  onGridMouseUp(e) {\r\n    const clicked_cell = e.target.closest('.cell');\r\n    let clicked_cell_index;\r\n\r\n    if (!clicked_cell || this.state.locked) {\r\n      return;\r\n    }\r\n\r\n    clicked_cell_index = Number(clicked_cell.dataset.index);\r\n\r\n    if (e.button === 0) {\r\n      if (!this.state.started) {\r\n        this.fillGrid(clicked_cell_index);\r\n        this.setState({started: true});\r\n        this.openCell(clicked_cell_index);\r\n        return;\r\n      }\r\n\r\n      this.openCell(clicked_cell_index);\r\n    } else if (e.button === 2) {\r\n      this.flagCell(clicked_cell_index);\r\n    }\r\n  }\r\n\r\n  onGridMouseDown(e) {\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"grid\" onMouseDown={this.onGridMouseDown.bind(this)} onMouseUp={this.onGridMouseUp.bind(this)}>\r\n          {\r\n            this.state.grid.map((cell, i) => {\r\n              return (\r\n                <Cell key={cell.id} index={cell.id} open={cell.open} value={cell.value} hasFlag={cell.has_flag} hasMine={cell.has_mine} />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Grid;","import React from 'react';\nimport Grid from './components/Grid';\nimport './style.css';\nimport Victory from \"./images/victory.jpg\";\nimport { render } from 'react-dom';\n\nconst MINES = 40;\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      victory: false,\n      game_timer: 0,\n      mine_count: MINES,\n      grid_refresh_key: Date.now()\n    }\n  }\n\n  componentDidMount() {\n    window.oncontextmenu = () => {return false};\n  }\n\n  startTimer(start) {\n    this.timer = setInterval(() => {\n      this.setState({\n        game_timer: Math.round((Date.now() - start) / 1000)\n      })\n    }, 1000)\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n  }\n\n  resetTimer() {\n    clearInterval(this.timer);\n    this.setState({\n      game_timer: 0\n    })\n  }\n\n  updateMineCount(flags) {\n    this.setState({\n      mine_count: MINES - flags\n    })\n  }\n\n  loseTheGame() {\n    this.stopTimer();\n  }\n\n  restartTheGame() {\n    this.resetTimer();\n    this.setState({\n      grid_refresh_key: Date.now(),\n      mine_count: MINES\n    })\n  }\n\n  winTheGame() {\n    this.stopTimer();\n    this.setState({\n      victory: true\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <Grid\n          key={this.state.grid_refresh_key}\n          mines={MINES}\n          updateMineCount={this.updateMineCount.bind(this)}\n          startTimer={this.startTimer.bind(this)}\n          loseTheGame={this.loseTheGame.bind(this)}\n          winTheGame={this.winTheGame.bind(this)}\n        />\n        <div className=\"sidemenu\">\n          <div className=\"sidemenu__title\">Mineswpr</div>\n          <div className=\"sidemenu__counters\">\n            <div className=\"sidemenu__counter\">{this.state.mine_count}</div>\n            <div className=\"sidemenu__counter\">{this.state.game_timer}</div>\n          </div>\n          <div className=\"sidemenu__restart\">\n            <button className=\"sidemenu__restart-btn\" onClick={this.restartTheGame.bind(this)}>Restart â†»</button>\n          </div>\n          {\n            this.state.victory\n            ? (\n                <div className=\"victory-image-container\">\n                  <img className=\"victory-image\" src={Victory} />\n                </div>\n              )\n            : null\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/victory.291a09be.jpg\";"],"sourceRoot":""}